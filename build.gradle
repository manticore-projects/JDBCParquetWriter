import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask

plugins {
    id 'java-library'

    id 'maven-publish'
    id 'signing'

    id 'jacoco'
    id "com.github.spotbugs" version "latest.release"
    id "com.diffplug.spotless" version "latest.release"
    id 'pmd'
    id 'checkstyle'
    id 'org.sonatype.gradle.plugins.scan' version "latest.release"

    id "org.hidetake.ssh" version "latest.release"
    id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "2.0.0" //later depends on JDK17

    id "me.champeau.jmh" version "latest.release"
}

repositories {
    gradlePluginPortal()
    mavenLocal()
    mavenCentral()

    // DuckDB Snapshots
    maven {
        url = uri('https://oss.sonatype.org/content/groups/public/')
    }

    // Sonatype OSSRH
    maven {
        url = uri('https://s01.oss.sonatype.org/content/repositories/snapshots/')
    }
}

def getVersion = { boolean considerSnapshot ->
    int major = 0
    int minor = 0
    int patch = 0
    int build = 0
    String commit = ""
    String snapshot = ""
    new ByteArrayOutputStream().withStream { os ->
        exec {
            workingDir "$projectDir"
            args = [
                    "--no-pager"
                    , "describe"
                    , "--tags"
                    , "--always"
                    , "--dirty=-SNAPSHOT"
            ]
            executable "git"
            standardOutput = os
        }
        def versionStr = os.toString().trim()
        def pattern = /(?<major>\d*)\.(?<minor>\d*)(\.(?<patch>\d*))?(-(?<build>\d*)-(?<commit>[a-zA-Z\d]*))?/
        def matcher = versionStr =~ pattern
        if (matcher.find()) {
            major = matcher.group('major') as Integer
            minor = matcher.group('minor') as Integer
            patch = matcher.group('patch') as Integer
            build = matcher.group('build') as Integer
            commit = matcher.group('commit')
        }

        if (considerSnapshot && ( versionStr.endsWith('SNAPSHOT') || build>0) ) {
            minor++
            patch = 0
            snapshot =  "-SNAPSHOT"
        }
        println("Derived Version: $versionStr --> ${major}.${minor}.${patch}${snapshot}")
    }
    return "${major}.${minor}.${patch}${snapshot}"
}
version = getVersion(true)
description = 'JDBC Table or ResultSet to Parquet File Writer'
group = "com.manticore-projects.jdbc"
archivesBaseName = "JDBCParquetWriter"

configurations {
    xmlDoclet
}

dependencies {
    implementation 'org.apache.parquet:parquet-common:+'
    implementation 'org.apache.parquet:parquet-encoding:+'
    implementation 'org.apache.parquet:parquet-column:+'
    implementation 'org.apache.parquet:parquet-hadoop:+'
    implementation 'org.apache.hadoop:hadoop-common:+'
    implementation 'org.apache.hadoop:hadoop-mapreduce-client-core:+'
    implementation 'org.lz4:lz4-java:+'

    implementation 'com.github.jsqlparser:jsqlparser:+'
    xmlDoclet 'com.manticore-projects.tools:xml-doclet:+'

    testImplementation 'org.junit.jupiter:junit-jupiter:+'
    testImplementation 'com.h2database:h2:+'
    testImplementation 'org.duckdb:duckdb_jdbc:+'

    testImplementation 'org.openjdk.jmh:jmh-core:+'
    testImplementation 'org.openjdk.jmh:jmh-generator-annprocess:+'
}

configurations.configureEach {
    resolutionStrategy {
        // avoid using old Logging APIs with security issues
        force 'org.apache.logging.log4j:log4j-api:2.+'
        force 'org.apache.logging.log4j:log4j-core:2.+'
        force 'org.apache.logging.log4j:log4j-slf4j-impl:2.+'
        force 'org.apache.logging.log4j:log4j-jul:2.+'
        force 'org.slf4j:slf4j-log4j12:2.+'
        force 'org.apache.avro:avro:+'
        force 'org.apache.commons:commons-configuration2:2.11.0'

        eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.bouncycastle' &&
                    details.requested.name == 'bcprov-jdk15on') {
                details.useTarget 'org.bouncycastle:bcprov-jdk18on:1.78.1'
            }
        }

        // avoid vulnerable Hadoop Dependencies not needed for Parquet
        exclude(group: 'io.netty')
        exclude(group: 'org.codehaus.jettison')
        exclude(group: 'org.mortbay.jetty')
        exclude(group: 'javax.servlet.jsp')
        exclude(group: 'com.sun.jersey')
        exclude(group: 'org.apache.curator')
        exclude(group: 'org.apache.zookeeper')
        exclude(group: 'org.apache.kerby')
        exclude(group: 'com.google.protobuf')
        exclude(group: 'org.yaml')
        exclude(group: 'net.minidev', module: 'json-smart')
        exclude(group: 'org.codehaus.jackson', module: 'jackson-mapper-asl')
        exclude(group: 'org.apache.hadoop', module: 'hadoop-hdfs-client')
        exclude(group: 'com.google.guava', module: 'guava')

        exclude(group: 'dnsjava', module: 'dnsjava')
        exclude(group: 'com.nimbusds', module: 'nimbus-jose-jwt')
    }
}

java {
    withSourcesJar()
    withJavadocJar()
    sourceCompatibility(JavaVersion.VERSION_11)
    targetCompatibility(JavaVersion.VERSION_11)

    // needed for XML-Doclet to work (since Doclet changed again with Java 13)
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    options.addBooleanOption("Xdoclint:none", true)
}

tasks.register('xmldoc', Javadoc) {
    source = sourceSets.main.allJava
    destinationDir = reporting.file("xmlDoclet")
    options.docletpath = configurations.xmlDoclet.files.asType(List)
    options.doclet = "com.github.markusbernhardt.xmldoclet.XmlDoclet"

    options.addBooleanOption("rst", true)
    options.addStringOption("basePackage", "com.manticore.jdbc")

    dependsOn(compileJava)
    doLast {
        copy {
            from reporting.file("xmlDoclet/javadoc.rst")
            into "${projectDir}/src/site/sphinx/"
        }
    }
}

publish {
    dependsOn(check)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'jdbcparquetwriter'

            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'JDBCParquetWriter'
                description = 'JDBC Table or ResultSet to Parquet File Writer'
                url = 'https://manticore-projects.com/JDBCParquetWriter'
                licenses {
                    license {
                        name = 'The GNU GENERAL PUBLIC LICENSE, Version 3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                    }
                }
                developers {
                    developer {
                        id = 'are'
                        name = 'Andreas Reichel'
                        email = 'andreas@manticore-projects.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/manticore-projects/JDBCParquetWriter.git'
                    developerConnection = 'scm:git:ssh://git@github.com:manticore-projects/JDBCParquetWriter.git'
                    url = 'https://github.com/manticore-projects/JDBCParquetWriter'
                }
            }
        }
    }
    repositories {
        maven {
            name "ossrh"

            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl= "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials(PasswordCredentials)
        }
        maven {
            name = "GitHubPackages"

            url = uri("https://maven.pkg.github.com/manticore-projects/jdbcparquetwriter")
            credentials(PasswordCredentials)
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}


test {
    environment = [ 'SAMPLE_SIZE': '100000' ]

    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    jacoco {
        excludes = ['net/sf/jsqlparser/parser/CCJSqlParserTokenManager']
    }
}

jmh {
    iterations = 3 // Number of measurement iterations to do.
    benchmarkMode = ['avgt'] // Benchmark mode. Available modes are: [Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all]
    fork = 1 // How many times to forks a single benchmark. Use 0 to disable forking altogether
    failOnError = true // Should JMH fail immediately if any benchmark had experienced the unrecoverable error?
    humanOutputFile = project.file("${project.buildDir}/reports/jmh/human.txt") // human-readable output file
    resultsFile = project.file("${project.buildDir}/reports/jmh/results.txt") // results file
    resultFormat = 'CSV' // Result format type (one of CSV, JSON, NONE, SCSV, TEXT)
    timeUnit = 'ms' // Output time unit. Available time units are: [m, s, ms, us, ns].
    includeTests = true
}

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugs {
    excludeFilter = file("config/spotbugs/spotBugsExcludeFilter.xml")
}

pmd {
    consoleOutput = false
    sourceSets = [sourceSets.main]

    // clear the ruleset in order to use configured rules only
    ruleSets = []

    rulesMinimumPriority = 1
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

checkstyle {
    sourceSets = [sourceSets.main, sourceSets.test]
    configFile = file('config/checkstyle/checkstyle.xml')
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = false
        html.required = true
    }
}

spotless {
    // optional: limit format enforcement to just the files changed by this feature branch
    ratchetFrom 'origin/main'

    format 'misc', {
        // define the files to apply `misc` to
        target '*.rst', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces(4) // or spaces. Takes an integer argument if you don't like 4
        endWithNewline()
    }
    java {
        indentWithSpaces(4)
        eclipse().configFile('config/formatter/eclipse-java-google-style.xml')
    }
}


jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.990
            }
        }
        rule {
            limit {
                counter = 'LINE'
                value = 'MISSEDCOUNT'
                maximum = 10
            }
        }
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'MISSEDRATIO'
                maximum = 0.05
            }
        }
    }
}

tasks.register('gitChangelogTask', GitChangelogTask) {
    fromRepo = file("$projectDir")
    file = new File("${projectDir}/src/site/sphinx/changelog.rst")
    fromRef = "1.0.0"
    //toRef = "1.1";

    // switch off the formatter since the indentation matters for Mark-down
    // @formatter:off
    templateContent ="""
************************
Changelog
************************


{{#tags}}
{{#ifMatches name "^Unreleased.*"}}
Latest Changes since |JDBCPARQUETWRITER_VERSION|
{{/ifMatches}}
{{#ifMatches name "^(?!Unreleased).*"}}
Version {{name}}
{{/ifMatches}}
=============================================================

 {{#issues}}

  {{#commits}}
   {{#ifMatches messageTitle "^(?!Merge).*"}}
  * **{{{messageTitle}}}**
    
    {{authorName}}, {{commitDate}}
   {{/ifMatches}}
  {{/commits}}

 {{/issues}}
{{/tags}}
"""
    // @formatter:on
}

remotes {
    webServer {
        host = findProperty("${project.name}.host")
        user = findProperty("${project.name}.username")
        identity = new File("${System.properties['user.home']}/.ssh/id_rsa")
    }
}

tasks.register('upload') {
    doFirst {
        if (findProperty("${project.name}.host") == null) {
            println(
                    """
                Property \"${project.name}.host\' not found.
                Please define \"${project.name}.host\" in the Gradle configuration (e. g. \$HOME/.gradle/gradle.properties.
                """
            )
        }
    }
    doLast {
        ssh.run {
            session(remotes.webServer) {
                def versionStable = getVersion(false)
                execute "mkdir -p download/${project.name}-${versionStable}"
                for (File file: fileTree(include:['*.jar'], dir:"${project.buildDir}/libs").collect()) {
                    put from: file, into: "download/${project.name}-${versionStable}"
                }
            }
        }
    }
}
